{
	// Place your design-patterns workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"DIContainer": {
		"scope": "typescript",
		"prefix": "DIContainer",
		"body": [
			"// Usage:",
			"// import { ${1:DIContainer} } from './${1:DIContainer}';",
			"// ",
			"// interface IDepA {",
			"//     doA(): void;",
			"// }",
			"// ",
			"// interface IDepB {",
			"//     (): void;",
			"// }",
			"// ",
			"// interface IDepC {",
			"//     doC(): void;",
			"// }",
			"// ",
			"// class ConcreteA implements IDepA {",
			"//     doA(): void {",
			"//         console.log('Doing A');",
			"//     }",
			"// }",
			"// ",
			"// class ConcreteB implements IDepB {",
			"//     doB(): void {",
			"//         console.log('Doing B');",
			"//     }",
			"// }",
			"// ",
			"// class ConcreteC implements IDepC {",
			"//     constructor (private _concreteA: IDepA, private _concreteB: IDepB) {}",
			"// ",
			"//     doC(): void {",
			"//         this._concreteA.doA();",
			"//         this._concreteB.doB();",
			"//         console.log('Doing C');",
			"//     }",
			"// }",
			"// ",
			"// let container = DIContainer.instance;",
			"// ",
			"// container.register('IDepA', [], ConcreteA);",
			"// container.register('IDepB', [], ConcreteB);",
			"// container.register('IDepC', ['IDepA', 'IDepB'], ConcreteC);",
			"// ",
			"// let a = container.resolve<IDepA>('IDepA');",
			"// a.doA();",
			"// ",
			"// let b = container.resolve<IDepB>('IDepB');",
			"// b.doB();",
			"// ",
			"// let c = container.resolve<IDepC>('IDepC');",
			"// c.doC();",
			"export class ${1:DIContainer} {",
			"    private static _instance: ${1:DIContainer} = new ${1:DIContainer}();",
			"    private _dependencies: {[key: string]: Object} = {}",
			"",
			"    constructor() {",
			"        if (${1:DIContainer}._instance) {",
			"            throw new Error('Singleton class. Cannot instantiate using new');",
			"        }",
			"        ${1:DIContainer}._instance = this;",
			"    }",
			"",
			"    public static get instance(): ${1:DIContainer} {",
			"        return ${1:DIContainer}._instance;",
			"    }",
			"    register(name: string, dependencies: string[], implementation: any) {",
			"        if (this._dependencies[name]) {",
			"            throw new Error('Dependency already registered');",
			"        }",
			"    let dependenciesImplementations = this.getDependenciesImplementations(dependencies);",
			"    this._dependencies[name] = new implementation(...dependenciesImplementations);",
			"    }",
			"",
			"    resolve<T>(name: string): T {",
			"        if (!this._dependencies[name]) {",
			"            throw new Error(`Unresolved dependency: ${name}`);",
			"        }",
			"        return this._dependencies[name] as T;",
			"    }",
			"",
			"    private getDependenciesImplementations(names: string[]): Object[] {",
			"        return names.map(name => this.resolve(name));",
			"    }",
			"}",
		],
		"description": "Typescript Depenency Injection Container Class"
	}
}